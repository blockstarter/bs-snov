// Generated by LiveScript 1.5.0
(function(){
  var out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
  angular.module('members', ['flyber', 'ngStorage', 'pascalprecht.translate']).filter('remove_sign', function(){
    return function(it){
      return it.replace('$', '');
    };
  }).config(function($translateProvider){
    $translateProvider.translations('en', {
      "ICO snovio dashboard": "ICO snovio dashboard",
      "Thank you for registration. Please": "Thank you for registration. Please",
      "confirm your email": "confirm your email",
      "En": "En",
      "Ru": "Ru",
      "Profile": "Profile",
      "Settings": "Settings",
      "Log Out": "Log Out",
      "John Smith": "John Smith",
      "3 mins ago": "3 mins ago",
      "Film festivals used to be do-or-die moments for movie makers. They were where...": "Film festivals used to be do-or-die moments for movie makers. They were where...",
      "See All Alerts": "See All Alerts",
      "Crowdsale starts in": "Crowdsale starts in",
      "Days": "Days",
      "Minutes": "Minutes",
      "Seconds": "Seconds",
      "Tokensale progress": "Tokensale progress",
      "Softcap": "Softcap",
      "Tokensale status": "Tokensale status",
      "Calculate": "Calculate",
      "Your buy": "Your buy",
      "Snov tokens": "Snov tokens",
      "Your pay": "Your pay",
      "Please make sure your deposit equals or exceeds the minimum purchase amount (at the current exchange rate it is 0.012 BTC)": "Please make sure your deposit equals or exceeds the minimum purchase amount (at the current exchange rate it is 0.012 BTC)",
      "Your transaction history": "Your transaction history",
      "Date": "Date",
      "Transaction ID": "Transaction ID",
      "Address Source": "Address Source",
      "Snov assigned": "Snov assigned",
      "Token crowdsale pool:": "Token crowdsale pool:",
      "Snov token price:": "Snov token price:",
      "Bonuses:": "Bonuses:",
      "First day": "First day",
      "First week": "First week",
      "You contributed": "You contributed",
      "Tokens you hold": "Tokens you hold",
      "Buy now": "Buy now",
      "Copyright © Snov.io 2017": "Copyright © Snov.io 2017"
    });
    $translateProvider.translations('ru', {
      "ICO snovio dashboard": "snovio ICO панель управления",
      "Thank you for registration. Please": "Спасибо, что зарегистрировались. Пожалуйста",
      "confirm your email": "подтвердите ваш адрес электронной почты",
      "Ru": "Рус",
      "En": "Анг",
      "Log Out": "Выход",
      "Settings": "Настройки",
      "Profile": "Профиль",
      "Film festivals used to be do-or-die moments for movie makers. They were where...": "Кинофестивали раньше были для кинорежиссеров, и они были там ...",
      "3 mins ago": "3 минуты назад",
      "John Smith": "Джон Смит",
      "See All Alerts": "Просмотреть все предупреждения",
      "Crowdsale starts in": "Начало предпродажи начнется через",
      "Days": "Дней",
      "Minutes": "Минут",
      "Seconds": "Секунд",
      "Tokensale progress": "Прогресс продажи токенов",
      "Softcap": "Softcap",
      "Tokensale status": "Статус продажи токенов",
      "Calculate": "Калькулятор",
      "Your buy": "Вы покупаете",
      "Snov tokens": "Snov токены",
      "Your pay": "Вы платите",
      "Please make sure your deposit equals or exceeds the minimum purchase amount (please check the minimum amount in WP)": "Пожалуйста, убедитесь, что ваш депозит равен или превышает минимальную сумму покупки (посмотрите минимальный курс в ВП)",
      "Snov assigned": "количество Snov",
      "Address Source": "Источник адреса",
      "Transaction ID": "Номер транзакции",
      "Date": "Дата",
      "Your transaction history": "История транзакций",
      "Buy now": "Купить сейчас",
      "Tokens you hold": "Ваши токены",
      "You contributed": "Внесено",
      "First week": "Первая неделя",
      "First day": "Первый день",
      "Bonuses:": "Бонусы:",
      "Snov token price:": "Стоимость токена Snov:",
      "Token crowdsale pool:": "Пул предпродажи токенов:",
      "Copyright © Snov.io 2017": "Copyright © Snov.io 2017"
    });
    return $translateProvider.preferredLanguage('en');
  }).directive('qrcode', function(){
    return {
      restrict: 'A',
      scope: {
        qrcode: '='
      },
      controller: function($scope, $element){
        return $scope.$watch('qrcode', function(value){
          $element.empty();
          return new QRCode($element[0], value);
        });
      }
    };
  }).controller('members', function($scope, $http, $localStorage, $window, $translate, $timeout){
    var m, init, setCurrent, show, changePrice, updateTime, model, transformRates, notificationReadComplete, changeLanguage, setLanguage, confirmEmailAddress, buy, logout;
    m = 1000000;
    init = function(func){
      var s, ref$;
      s = init.scripts = (ref$ = init.scripts) != null
        ? ref$
        : [];
      init.all = function(){
        return s.forEach(function(it){
          return it();
        });
      };
      s.push(func);
      return func;
    };
    out$.setCurrent = setCurrent = init(function(rate){
      model.currentRate = rate != null
        ? rate
        : model.rates[0];
      return changePrice();
    });
    out$.show = show = {};
    out$.changePrice = changePrice = function(){
      return model.youPay = model.youBuy * model.currentRate.change;
    };
    updateTime = init(function(){
      var update;
      update = function(arg$){
        var head, tail;
        head = arg$[0], tail = slice$.call(arg$, 1);
        if (model.timer[head] > 0) {
          return model.timer[head] -= 1;
        } else if (head !== 'days') {
          model.timer[head] = 59;
          return update(tail);
        }
      };
      update(['seconds', 'minutes', 'hours', 'days']);
      return $timeout(updateTime, 1000);
    });
    out$.model = model = {
      loading: true,
      address: "Loading...",
      youBuy: 100000,
      youPay: 0.05,
      currentRate: {},
      languages: [
        {
          title: 'Ru',
          name: 'ru'
        }, {
          title: 'En',
          name: 'en'
        }
      ],
      timer: {
        days: 30,
        hours: 2,
        minutes: 15,
        seconds: 0
      },
      progress: {
        min: 0,
        max: 0,
        current: {
          usd: 0,
          eth: 0,
          percent: "0%",
          contributors: 0
        }
      },
      tokenPriceEth: 0,
      bonuses: {
        firstDay: 15,
        firstWeek: 5
      },
      rates: [],
      transactions: [],
      you: {
        contributedEth: 12,
        tokensYouHold: 3,
        email: null,
        confirmed: false
      }
    };
    transformRates = function(rate){
      rate.change = rate.rate;
      return rate;
    };
    out$.notificationReadComplete = notificationReadComplete = function(notification){
      notification.isRead = true;
      return $http.post('/api/notificationReadComplete', (import$({
        id: notification.id
      }, $localStorage))).then(function(resp){})['catch'](function(){
        return notification.isRead = false;
      });
    };
    $http.post('/api/panel', $localStorage).then(function(resp){
      var usd;
      usd = resp.data.rates.filter(function(it){
        return it.token === 'USD';
      })[0];
      model.loading = false;
      model.rates = resp.data.rates.map(transformRates);
      model.you.email = resp.data.user.profile.email;
      model.you.confirmed = resp.data.user.profile.confirmed;
      model.you.contributedEth = resp.data.user.contribution.total;
      model.you.tokensYouHold = resp.data.user.contribution.own;
      model.transactions = resp.data.user.transactions;
      model.progress.max = resp.data.config.panelinfo.max_cap_in_eth * usd.rate;
      model.progress.min = resp.data.config.panelinfo.min_cap_in_eth * usd.rate;
      model.progress.current.usd = resp.data.campaign.total;
      model.progress.current.eth = resp.data.campaign.total / usd.rate;
      model.progress.current.percent = resp.data.campaign.percent + "%";
      model.progress.current.contributors = resp.data.campaign.contributions;
      model.progress.tokenPriceEth = 1 / resp.data.campaign.price;
      return init.all();
    })['catch'](function(resp){});
    out$.$localStorage = $localStorage;
    changeLanguage = init(function(language){
      return $translate.use(language != null
        ? language
        : $localStorage.language);
    });
    out$.setLanguage = setLanguage = function(language){
      $localStorage.language = language;
      return changeLanguage(language);
    };
    out$.confirmEmailAddress = confirmEmailAddress = function(){
      if (model.you.email == null) {
        return;
      }
      return "https://" + model.you.email.replace(/^[^@]+@/ig, '');
    };
    out$.buy = buy = function($event){
      var token;
      token = model.currentRate.token;
      model.address = "Loading...";
      $http.post('/api/address', (import$({
        type: token
      }, $localStorage))).then(function(resp){
        var ref$;
        return ref$ = resp.data, model.address = ref$.address, ref$;
      })['catch'](function(){
        return alert("Oops. Server error :(");
      });
    };
    out$.logout = logout = function($event){
      var ref$;
      $event.preventDefault();
      $localStorage.sessionId = "N";
      return ref$ = $event.target, location.href = ref$.href, ref$;
    };
    importAll$($scope, out$);
    $window.debug = {};
    return importAll$($window.debug, out$);
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
