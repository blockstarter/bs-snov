// Generated by LiveScript 1.5.0
(function(){
  var out$ = typeof exports != 'undefined' && exports || this;
  angular.module('app', ['flyber', 'ngStorage', 'pascalprecht.translate']).filter('remove_sign', function(){
    return function(it){
      return it.replace('$', '');
    };
  }).config(function($translateProvider){
    $translateProvider.translations('en', {
      "ICO snovio dashboard": "ICO snovio dashboard",
      "Thank you for registration. Please": "Thank you for registration. Please",
      "confirm your email": "confirm your email",
      "En": "En",
      "Ru": "Ru",
      "Profile": "Profile",
      "Settings": "Settings",
      "Log Out": "Log Out",
      "John Smith": "John Smith",
      "3 mins ago": "3 mins ago",
      "Film festivals used to be do-or-die moments for movie makers. They were where...": "Film festivals used to be do-or-die moments for movie makers. They were where...",
      "See All Alerts": "See All Alerts",
      "Crowdsale starts in": "Crowdsale starts in",
      "Days": "Days",
      "Minutes": "Minutes",
      "Seconds": "Seconds",
      "Tokensale progress": "Tokensale progress",
      "Softcap": "Softcap",
      "Tokensale status": "Tokensale status",
      "Calculate": "Calculate",
      "Your buy": "Your buy",
      "Snov tokens": "Snov tokens",
      "Your pay": "Your pay",
      "Please make sure your deposit equals or exceeds the minimum purchase amount (at the current exchange rate it is 0.012 BTC)": "Please make sure your deposit equals or exceeds the minimum purchase amount (at the current exchange rate it is 0.012 BTC)",
      "Your transaction history": "Your transaction history",
      "Date": "Date",
      "Transaction ID": "Transaction ID",
      "Address Source": "Address Source",
      "Snov assigned": "Snov assigned",
      "Token crowdsale pool:": "Token crowdsale pool:",
      "Snov token price:": "Snov token price:",
      "Bonuses:": "Bonuses:",
      "First day": "First day",
      "First week": "First week",
      "You contributed": "You contributed",
      "Tokens you hold": "Tokens you hold",
      "Buy now": "Buy now",
      "Copyright © Snov.io 2017": "Copyright © Snov.io 2017"
    });
    $translateProvider.translations('ru', {
      "ICO snovio dashboard": "snovio ICO панель управления",
      "Thank you for registration. Please": "Спасибо, что зарегистрировались. Пожалуйста",
      "confirm your email": "подтвердите ваш адрес электронной почты",
      "Ru": "Рус",
      "En": "Анг",
      "Log Out": "Выход",
      "Settings": "Настройки",
      "Profile": "Профиль",
      "Film festivals used to be do-or-die moments for movie makers. They were where...": "Кинофестивали раньше были для кинорежиссеров, и они были там ...",
      "3 mins ago": "3 минуты назад",
      "John Smith": "Джон Смит",
      "See All Alerts": "Просмотреть все предупреждения",
      "Crowdsale starts in": "Начало предпродажи начнется через",
      "Days": "Дней",
      "Minutes": "Минут",
      "Seconds": "Секунд",
      "Tokensale progress": "Прогресс продажи токенов",
      "Softcap": "Softcap",
      "Tokensale status": "Статус продажи токенов",
      "Calculate": "Калькулятор",
      "Your buy": "Вы покупаете",
      "Snov tokens": "Snov токены",
      "Your pay": "Вы платите",
      "Please make sure your deposit equals or exceeds the minimum purchase amount (at the current exchange rate it is 0.012 BTC)": "Пожалуйста, убедитесь, что ваш депозит равен или превышает минимальную сумму покупки (при текущем обменном курсе это 0,012 BTC)",
      "Snov assigned": "количество Snov",
      "Address Source": "Источник адреса",
      "Transaction ID": "Номер транзакции",
      "Date": "Дата",
      "Your transaction history": "История транзакций",
      "Buy now": "Купить сейчас",
      "Tokens you hold": "Ваши токены",
      "You contributed": "Внесено",
      "First week": "Первая неделя",
      "First day": "Первый день",
      "Bonuses:": "Бонусы:",
      "Snov token price:": "Стоимость токена Snov:",
      "Token crowdsale pool:": "Пул предпродажи токенов:",
      "Copyright © Snov.io 2017": "Copyright © Snov.io 2017"
    });
    return $translateProvider.preferredLanguage('en');
  }).controller('members', function($scope, $http, $localStorage, $window){
    var m, createTransaction, init, setCurrent, changePrice, model, transformRates, buy, logout;
    m = 1000000;
    createTransaction = function(){
      return {
        url: "http://google.com.ua",
        date: new Date(),
        tx: "2424234234234234234234234234234234",
        address: "0x23423432423443423423423",
        assigned: 0.12
      };
    };
    init = function(func){
      var s, ref$;
      s = init.scripts = (ref$ = init.scripts) != null
        ? ref$
        : [];
      init.all = function(){
        return s.forEach(function(it){
          return it();
        });
      };
      s.push(func);
      return func;
    };
    out$.setCurrent = setCurrent = init(function(rate){
      model.currentRate = rate != null
        ? rate
        : model.rates[0];
      return changePrice();
    });
    out$.changePrice = changePrice = function(){
      return model.youPay = model.youBuy * model.currentRate.change;
    };
    out$.model = model = {
      loading: true,
      youBuy: 100000,
      youPay: 0.05,
      currentRate: {},
      languages: [
        {
          title: 'Ru',
          name: 'ru'
        }, {
          title: 'En',
          name: 'en'
        }
      ],
      timer: {
        days: 0,
        hours: 0,
        minutes: 0,
        seconds: 0
      },
      progress: {
        min: 5 * m,
        max: 15 * m,
        current: {
          usd: 11 * m,
          eth: 18 * m / 300,
          percent: "70%",
          contributors: 200
        }
      },
      tokenPriceEth: 0.015,
      bonuses: {
        firstDay: 15,
        firstWeek: 5
      },
      rates: [],
      transactions: [createTransaction(), createTransaction(), createTransaction(), createTransaction()],
      you: {
        contributedEth: 12,
        tokensYouHold: 3
      }
    };
    $window.model = model;
    transformRates = function(rate){
      rate.change = rate.rate;
      return rate;
    };
    $http.post('/api/panel', $localStorage).then(function(resp){
      model.loading = false;
      model.rates = resp.data.rates.map(transformRates);
      return init.all();
    })['catch'](function(resp){
      return location.href = '/login';
    });
    out$.buy = buy = function($event){
      return $event.preventDefault();
    };
    out$.logout = logout = function($event){
      var ref$;
      $event.preventDefault();
      $localStorage.sessionId = null;
      return ref$ = $event.target, location.href = ref$.href, ref$;
    };
    return importAll$($scope, out$);
  });
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
